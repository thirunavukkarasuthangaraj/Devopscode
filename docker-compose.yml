version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: postgres-1
    restart: always
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_DB: database-1

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper-1
    restart: always
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka
    container_name: kafka-1
    restart: always
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka-1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:2181

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.5
    container_name: elasticsearch-1
    restart: always
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9200/_cluster/health" ]
      interval: 20s
      timeout: 10s
      retries: 10

  backend:
    build:
      context: ./springboot-backend
    container_name: springboot-backend-1
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      elasticsearch:
        condition: service_healthy
      kafka:
        condition: service_started
      postgres:
        condition: service_started
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-1:5432/database-1
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres123
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka-1:9092
      SPRING_DATA_ELASTICSEARCH_URIS: http://elasticsearch-1:9200

  frontend:
    build:
      context: ./angular-frontend
    container_name: angular-frontend-1
    restart: always
    ports:
      - "4200:80"
    depends_on:
      - backend

networks:
  default:
    driver: bridge
